hal: Options:   -cdslib ./INCA_libs/irun.lnx8664.15.20.nc/cds.lib -logfile ncverilog.log -f /home/sgeuser114/Desktop/venkat/singleCycleProcessor/topLevel/rtl/INCA_libs/irun.lnx8664.15.20.nc/hal.args .
hal: Snapshot:  worklib.booth32x32_top:v.
hal: Workspace: /home/sgeuser114/Desktop/venkat/singleCycleProcessor/topLevel/rtl.
hal: Date: Wed Mar 01 02:15:21 IST 2023.
hal: Running on elaborated SNAPSHOT.....
hal: *M,_SCOPE: __dummy_top
halcheck: *M,_SCOPE: booth32x32_top
halcheck: *N,CDNOTE (./topMod.v,1|0): The compiler directive '`timescale' is used in the RTL.
halcheck: *W,DIFFMN (./topMod.v,3|0): Module name 'booth32x32_top' differs from file name 'topMod.v'.
halcheck: *N,PRTCNT (./topMod.v,3|0): Module/Entity 'booth32x32_top' contains '5' ports.
halcheck: (./topMod.v,3): Number of Input ports: 3.
halcheck: (./topMod.v,3): Number of Output ports: 2.
halcheck: *W,IPRTEX (./topMod.v,55|0): A constant is used in a port expression.
halcheck: *W,STYVAL (./topMod.v,4|0): Numeric value '31' used for identifier 'A'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./topMod.v,5|0): Numeric value '31' used for identifier 'B'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./topMod.v,7|0): Numeric value '31' used for identifier 'PROD_MSB'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./topMod.v,8|0): Numeric value '31' used for identifier 'PROD_LSB'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./topMod.v,4|0): Net name 'A' uses uppercase characters.
halcheck: *W,LCVARN (./topMod.v,5|0): Net name 'B' uses uppercase characters.
halcheck: *W,LCVARN (./topMod.v,7|0): Net name 'PROD_MSB' uses uppercase characters.
halcheck: *W,LCVARN (./topMod.v,8|0): Net name 'PROD_LSB' uses uppercase characters.
halcheck: *W,LCVARN (./topMod.v,14|0): Net name 'PP0' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,14|0): Identifier 'PP0' has a numeric value suffix.
halcheck: *W,STYVAL (./topMod.v,14|0): Numeric value '63' used for identifier 'PP0'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./topMod.v,14|0): Net name 'PP1' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,14|0): Identifier 'PP1' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,14|0): Net name 'PP2' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,14|0): Identifier 'PP2' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,14|0): Net name 'PP3' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,14|0): Identifier 'PP3' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,15|0): Net name 'PP4' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,15|0): Identifier 'PP4' has a numeric value suffix.
halcheck: *W,STYVAL (./topMod.v,15|0): Numeric value '63' used for identifier 'PP4'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./topMod.v,15|0): Net name 'PP5' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,15|0): Identifier 'PP5' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,15|0): Net name 'PP6' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,15|0): Identifier 'PP6' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,15|0): Net name 'PP7' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,15|0): Identifier 'PP7' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,16|0): Net name 'PP8' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,16|0): Identifier 'PP8' has a numeric value suffix.
halcheck: *W,STYVAL (./topMod.v,16|0): Numeric value '63' used for identifier 'PP8'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./topMod.v,16|0): Net name 'PP9' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,16|0): Identifier 'PP9' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,16|0): Net name 'PP10' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,16|0): Identifier 'PP10' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,16|0): Net name 'PP11' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,16|0): Identifier 'PP11' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,17|0): Net name 'PP12' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,17|0): Identifier 'PP12' has a numeric value suffix.
halcheck: *W,STYVAL (./topMod.v,17|0): Numeric value '63' used for identifier 'PP12'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./topMod.v,17|0): Net name 'PP13' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,17|0): Identifier 'PP13' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,17|0): Net name 'PP14' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,17|0): Identifier 'PP14' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,17|0): Net name 'PP15' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,17|0): Identifier 'PP15' has a numeric value suffix.
halcheck: *W,LCVARN (./topMod.v,17|0): Net name 'PP16' uses uppercase characters.
halcheck: *W,NUMSUF (./topMod.v,17|0): Identifier 'PP16' has a numeric value suffix.
halcheck: *W,STYVAL (./topMod.v,33|0): Numeric value '63' used for identifier 's_um'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./topMod.v,47|0): Net name 'FINAL_PROD' uses uppercase characters.
halcheck: *W,STYVAL (./topMod.v,47|0): Numeric value '63' used for identifier 'FINAL_PROD'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./topMod.v,48|0): Net name 'Cout' uses uppercase characters.
halcheck: *W,STYVAL (./topMod.v,49|0): Numeric value '63' used for identifier 'cry_sh'. Use constants to avoid portability issues.
halcheck: *W,SHFTOF (./topMod.v,50|0): Shift overflow in module/design-unit booth32x32_top, some bits will be lost.
halcheck: *N,IDLENG (./multi_f.v,3|0): Identifier name 'booth_radix4_multiplier' is not of appropriate length (4 to 16 characters).
halcheck: *M,_SCOPE: booth32x32_top.booth_enc
halcheck: *N,CDNOTE (./multi_f.v,1|0): The compiler directive '`timescale' is used in the RTL.
halcheck: *W,CTLCHR (./multi_f.v,18|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./multi_f.v,19|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./multi_f.v,20|0): HDL source line contains one or more control characters.
halcheck: *W,BITUNS (./multi_f.v,36|0): Not all bits of constant '64'b0' are explicitly specified.
halcheck: (./multi_f.v,36): Constant extended by 63 bits to -> 64'b(000000000000000000000000000000000000000000000000000000000000000)0.
halcheck: *W,MAXLEN (./multi_f.v,37|0): The HDL source line is 81 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,MAXLEN (./multi_f.v,38|0): The HDL source line is 83 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,MAXLEN (./multi_f.v,39|0): The HDL source line is 86 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,MAXLEN (./multi_f.v,40|0): The HDL source line is 86 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,BITUNS (./multi_f.v,41|0): Not all bits of constant '64'b0' are explicitly specified.
halcheck: (./multi_f.v,41): Constant extended by 63 bits to -> 64'b(000000000000000000000000000000000000000000000000000000000000000)0.
halcheck: *W,DIFFMN (./multi_f.v,3|0): Module name 'booth_radix4_multiplier' differs from file name 'multi_f.v'.
halcheck: *N,PRTCNT (./multi_f.v,3|0): Module/Entity 'booth_radix4_multiplier' contains '20' ports.
halcheck: (./multi_f.v,3): Number of Input ports: 3.
halcheck: (./multi_f.v,3): Number of Output ports: 17.
halcheck: *W,STYVAL (./multi_f.v,4|0): Numeric value '31' used for identifier 'A'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./multi_f.v,5|0): Numeric value '31' used for identifier 'B'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./multi_f.v,7|0): Identifier 'PP0' has a numeric value suffix.
halcheck: *W,STYVAL (./multi_f.v,7|0): Numeric value '63' used for identifier 'PP0'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./multi_f.v,7|0): Identifier 'PP1' has a numeric value suffix.
halcheck: *N,DECLIN (./multi_f.v,7|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./multi_f.v,7|0): Identifier 'PP2' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,7|0): Identifier 'PP3' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,8|0): Identifier 'PP4' has a numeric value suffix.
halcheck: *W,STYVAL (./multi_f.v,8|0): Numeric value '63' used for identifier 'PP4'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./multi_f.v,8|0): Identifier 'PP5' has a numeric value suffix.
halcheck: *N,DECLIN (./multi_f.v,8|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./multi_f.v,8|0): Identifier 'PP6' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,8|0): Identifier 'PP7' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,9|0): Identifier 'PP8' has a numeric value suffix.
halcheck: *W,STYVAL (./multi_f.v,9|0): Numeric value '63' used for identifier 'PP8'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./multi_f.v,9|0): Identifier 'PP9' has a numeric value suffix.
halcheck: *N,DECLIN (./multi_f.v,9|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./multi_f.v,9|0): Identifier 'PP10' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,9|0): Identifier 'PP11' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,10|0): Identifier 'PP12' has a numeric value suffix.
halcheck: *W,STYVAL (./multi_f.v,10|0): Numeric value '63' used for identifier 'PP12'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./multi_f.v,10|0): Identifier 'PP13' has a numeric value suffix.
halcheck: *N,DECLIN (./multi_f.v,10|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./multi_f.v,10|0): Identifier 'PP14' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,10|0): Identifier 'PP15' has a numeric value suffix.
halcheck: *W,NUMSUF (./multi_f.v,10|0): Identifier 'PP16' has a numeric value suffix.
halcheck: *W,LCVARN (./multi_f.v,4|0): Net name 'A' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,5|0): Net name 'B' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,7|0): Net name 'PP0' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,7|0): Net name 'PP1' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,7|0): Net name 'PP2' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,7|0): Net name 'PP3' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,8|0): Net name 'PP4' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,8|0): Net name 'PP5' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,8|0): Net name 'PP6' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,8|0): Net name 'PP7' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,9|0): Net name 'PP8' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,9|0): Net name 'PP9' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,9|0): Net name 'PP10' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,9|0): Net name 'PP11' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,10|0): Net name 'PP12' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,10|0): Net name 'PP13' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,10|0): Net name 'PP14' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,10|0): Net name 'PP15' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,10|0): Net name 'PP16' uses uppercase characters.
halcheck: *W,LCVARN (./multi_f.v,14|0): Register name 'B_ext' uses uppercase characters.
halcheck: *W,STYVAL (./multi_f.v,14|0): Numeric value '34' used for identifier 'B_ext'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./multi_f.v,30|0): Numeric value '63' used for identifier 'partial'. Use constants to avoid portability issues.
halcheck: *W,NOBLKN (./multi_f.v,17|0): Each block should be labeled with a meaningful name.
halcheck: *W,NOBLKN (./multi_f.v,33|0): Each block should be labeled with a meaningful name.
halcheck: *W,CDEFCV (./multi_f.v,35|0): The case items of the case statement in module/design-unit booth_enc cover all the numerical values of the case expression. The default clause is not required.
halcheck: *W,MXUANS (./multi_f.v,37|0): Expression '{{32{A[31]}},A} ...' in module/design-unit booth_enc has both signed and unsigned variables/constants.
halcheck: (./multi_f.v,37): Variable 'i' is signed.
halcheck: (./multi_f.v,37): Variable 'A' is unsigned.
halcheck: (./multi_f.v,37): Variable 'A[31]' is unsigned.
halcheck: *W,MXUANS (./multi_f.v,38|0): Expression '{{32{A[31]}},A} ...' in module/design-unit booth_enc has both signed and unsigned variables/constants.
halcheck: (./multi_f.v,38): Variable 'i' is signed.
halcheck: (./multi_f.v,38): Variable 'A' is unsigned.
halcheck: (./multi_f.v,38): Variable 'A[31]' is unsigned.
halcheck: *W,SGNUSG (./multi_f.v,39|0): Negative value '-({{32{A[31]}},A} << ((2 * i) + 1))' assigned to an unsigned variable 'partial[i]' in module/design-unit booth_enc.
halcheck: *W,MXUANS (./multi_f.v,39|0): Expression '-({{32{A[31]}},A...' in module/design-unit booth_enc has both signed and unsigned variables/constants.
halcheck: (./multi_f.v,39): Variable 'i' is signed.
halcheck: (./multi_f.v,39): Variable 'A' is unsigned.
halcheck: (./multi_f.v,39): Variable 'A[31]' is unsigned.
halcheck: *W,SGNUSG (./multi_f.v,40|0): Negative value '-({{32{A[31]}},A} << (2 * i))' assigned to an unsigned variable 'partial[i]' in module/design-unit booth_enc.
halcheck: *W,MXUANS (./multi_f.v,40|0): Expression '-({{32{A[31]}},A...' in module/design-unit booth_enc has both signed and unsigned variables/constants.
halcheck: (./multi_f.v,40): Variable 'i' is signed.
halcheck: (./multi_f.v,40): Variable 'A' is unsigned.
halcheck: (./multi_f.v,40): Variable 'A[31]' is unsigned.
halcheck: *M,_SCOPE: booth32x32_top.tree
halcheck: *N,CDNOTE (./test03.v,1|0): The compiler directive '`timescale' is used in the RTL.
halcheck: *W,CTLCHR (./test03.v,25|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./test03.v,26|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./test03.v,27|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./test03.v,28|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./test03.v,29|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./test03.v,30|0): HDL source line contains one or more control characters.
halcheck: *W,MAXLEN (./test03.v,38|0): The HDL source line is 81 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,MAXLEN (./test03.v,43|0): The HDL source line is 81 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,MAXLEN (./test03.v,93|0): The HDL source line is 121 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,MAXLEN (./test03.v,95|0): The HDL source line is 81 characters, which exceeds the recommended length of 80 characters.
halcheck: *W,CTLCHR (./test03.v,163|0): HDL source line contains one or more control characters.
halcheck: *W,CTLCHR (./test03.v,164|0): HDL source line contains one or more control characters.
halcheck: *W,DIFFMN (./test03.v,82|0): Module name 'pp_tree16x64' differs from file name 'test03.v'.
halcheck: *N,PRTCNT (./test03.v,82|0): Module/Entity 'pp_tree16x64' contains '19' ports.
halcheck: (./test03.v,82): Number of Input ports: 17.
halcheck: (./test03.v,82): Number of Output ports: 2.
halcheck: *W,IPRTEX (./test03.v,104|0): A constant is used in a port expression.
halcheck: *W,IPRTEX (./test03.v,109|0): A constant is used in a port expression.
halcheck: *W,IPRTEX (./test03.v,114|0): A constant is used in a port expression.
halcheck: *W,IPRTEX (./test03.v,119|0): A constant is used in a port expression.
halcheck: *W,IPRTEX (./test03.v,139|0): A constant is used in a port expression.
halcheck: *W,IPRTEX (./test03.v,148|0): A constant is used in a port expression.
halcheck: *W,IPRTEX (./test03.v,159|0): A constant is used in a port expression.
halcheck: *W,NUMSUF (./test03.v,83|0): Identifier 'P0' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,83|0): Numeric value '63' used for identifier 'P0'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,83|0): Identifier 'P1' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,83|0): Numeric value '63' used for identifier 'P1'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,83|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,84|0): Identifier 'P2' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,84|0): Numeric value '63' used for identifier 'P2'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,84|0): Identifier 'P3' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,84|0): Numeric value '63' used for identifier 'P3'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,84|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,85|0): Identifier 'P4' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,85|0): Numeric value '63' used for identifier 'P4'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,85|0): Identifier 'P5' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,85|0): Numeric value '63' used for identifier 'P5'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,85|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,86|0): Identifier 'P6' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,86|0): Numeric value '63' used for identifier 'P6'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,86|0): Identifier 'P7' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,86|0): Numeric value '63' used for identifier 'P7'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,86|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,87|0): Identifier 'P8' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,87|0): Numeric value '63' used for identifier 'P8'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,87|0): Identifier 'P9' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,87|0): Numeric value '63' used for identifier 'P9'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,87|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,88|0): Identifier 'P10' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,88|0): Numeric value '63' used for identifier 'P10'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,88|0): Identifier 'P11' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,88|0): Numeric value '63' used for identifier 'P11'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,88|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,89|0): Identifier 'P12' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,89|0): Numeric value '63' used for identifier 'P12'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,89|0): Identifier 'P13' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,89|0): Numeric value '63' used for identifier 'P13'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,89|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,90|0): Identifier 'P14' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,90|0): Numeric value '63' used for identifier 'P14'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,90|0): Identifier 'P15' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,90|0): Numeric value '63' used for identifier 'P15'. Use constants to avoid portability issues.
halcheck: *N,DECLIN (./test03.v,90|0): Use a separate line for each HDL declaration.
halcheck: *W,NUMSUF (./test03.v,91|0): Identifier 'P16' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,91|0): Numeric value '63' used for identifier 'P16'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,92|0): Numeric value '63' used for identifier 's_u_m'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,93|0): Numeric value '63' used for identifier 'c_arr_y'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./test03.v,83|0): Net name 'P0' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,83|0): Net name 'P1' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,84|0): Net name 'P2' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,84|0): Net name 'P3' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,85|0): Net name 'P4' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,85|0): Net name 'P5' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,86|0): Net name 'P6' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,86|0): Net name 'P7' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,87|0): Net name 'P8' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,87|0): Net name 'P9' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,88|0): Net name 'P10' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,88|0): Net name 'P11' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,89|0): Net name 'P12' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,89|0): Net name 'P13' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,90|0): Net name 'P14' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,90|0): Net name 'P15' uses uppercase characters.
halcheck: *W,LCVARN (./test03.v,91|0): Net name 'P16' uses uppercase characters.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c0' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c00' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c1' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c2' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c3' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c4' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c5' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 'c6' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's0' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's00' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's1' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's2' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's3' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's4' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's5' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,95|0): Identifier 's6' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,97|0): Identifier 'cl0' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,97|0): Identifier 'cl00' has a numeric value suffix.
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'cl1' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,98|0): Numeric value '63' used for identifier 'cl1'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,99|0): Identifier 'cl2' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,99|0): Numeric value '63' used for identifier 'cl2'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,100|0): Identifier 'cl3' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,100|0): Numeric value '63' used for identifier 'cl3'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,131|0): Identifier 'cl4' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,131|0): Numeric value '63' used for identifier 'cl4'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,132|0): Identifier 'cl5' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,132|0): Numeric value '63' used for identifier 'cl5'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,153|0): Identifier 'cl6' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,153|0): Numeric value '63' used for identifier 'cl6'. Use constants to avoid portability issues.
halcheck: *W,SHFTOF (./test03.v,123|0): Shift overflow in module/design-unit tree, some bits will be lost.
halcheck: *W,SHFTOF (./test03.v,133|0): Shift overflow in module/design-unit tree, some bits will be lost.
halcheck: *W,SHFTOF (./test03.v,134|0): Shift overflow in module/design-unit tree, some bits will be lost.
halcheck: *W,SHFTOF (./test03.v,144|0): Shift overflow in module/design-unit tree, some bits will be lost.
halcheck: *W,SHFTOF (./test03.v,145|0): Shift overflow in module/design-unit tree, some bits will be lost.
halcheck: *W,SHFTOF (./test03.v,155|0): Shift overflow in module/design-unit tree, some bits will be lost.
halcheck: *W,SHFTOF (./test03.v,156|0): Shift overflow in module/design-unit tree, some bits will be lost.
halcheck: *W,LCVARN (./test03.v,102|0): Module instance name 'S1_0' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree.S1_0
halcheck: *W,DIFFMN (./test03.v,3|0): Module name 'compressor42_vec' differs from file name 'test03.v'.
halcheck: *W,MULTMF (./test03.v,3|0): More than one design-unit definition in file 'test03.v'.
halcheck: *N,PRTCNT (./test03.v,3|0): Module/Entity 'compressor42_vec' contains '7' ports.
halcheck: (./test03.v,3): Number of Input ports: 5.
halcheck: (./test03.v,3): Number of Output ports: 2.
halcheck: *W,STYVAL (./test03.v,4|0): Numeric value '63' used for identifier 'a'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,5|0): Numeric value '63' used for identifier 'b'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,6|0): Numeric value '63' used for identifier 'c'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,7|0): Numeric value '63' used for identifier 'd'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,9|0): Numeric value '63' used for identifier 'sum'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,10|0): Numeric value '63' used for identifier 'carry'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,13|0): Identifier 'c1' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,13|0): Numeric value '63' used for identifier 'c1'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,14|0): Identifier 'c2' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,14|0): Numeric value '63' used for identifier 'c2'. Use constants to avoid portability issues.
halcheck: *W,NUMSUF (./test03.v,15|0): Identifier 's1' has a numeric value suffix.
halcheck: *W,STYVAL (./test03.v,15|0): Numeric value '63' used for identifier 's1'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,18|0): Numeric value '63' used for identifier 'cout'. Use constants to avoid portability issues.
halcheck: *W,UNMGEN (./test03.v,22|0): Unnamed generate block found in module 'compressor42_vec'.
halcheck: *W,UNMGEN (./test03.v,25|0): Unnamed generate block found in module 'compressor42_vec'.
halcheck: *W,UNMGEN (./test03.v,28|0): Unnamed generate block found in module 'compressor42_vec'.
halcheck: *W,URAWIR (./test03.v,13|0): Wire 'c1' defined in module 'compressor42_vec' is unused (neither read nor assigned).
@:c1 
halcheck: *W,URAWIR (./test03.v,14|0): Wire 'c2' defined in module 'compressor42_vec' is unused (neither read nor assigned).
@:c2 
halcheck: *W,URDWIR (./test03.v,18|0): Wire 'cout[63]' defined in module 'compressor42_vec' does not drive any object, but is assigned at least once.
@:cout[63] 
halcheck: *W,LCVARN (./test03.v,107|0): Module instance name 'S1_1' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree.S1_1
halcheck: *W,LCVARN (./test03.v,112|0): Module instance name 'S1_2' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree.S1_2
halcheck: *W,LCVARN (./test03.v,117|0): Module instance name 'S1_3' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree.S1_3
halcheck: *W,LCVARN (./test03.v,124|0): Module instance name 'S1_FINAL' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree.S1_FINAL
halcheck: *W,DIFFMN (./test03.v,50|0): Module name 'compressor32_vec' differs from file name 'test03.v'.
halcheck: *W,MULTMF (./test03.v,50|0): More than one design-unit definition in file 'test03.v'.
halcheck: *N,PRTCNT (./test03.v,50|0): Module/Entity 'compressor32_vec' contains '5' ports.
halcheck: (./test03.v,50): Number of Input ports: 3.
halcheck: (./test03.v,50): Number of Output ports: 2.
halcheck: *W,STYVAL (./test03.v,51|0): Numeric value '63' used for identifier 'a'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,52|0): Numeric value '63' used for identifier 'b'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,53|0): Numeric value '63' used for identifier 'c'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,56|0): Numeric value '63' used for identifier 'sm'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./test03.v,57|0): Numeric value '63' used for identifier 'cry'. Use constants to avoid portability issues.
halcheck: *W,UNMGEN (./test03.v,64|0): Unnamed generate block found in module 'compressor32_vec'.
halcheck: *N,DECLIN (./test03.v,57|0): Use a separate line for each HDL declaration.
halcheck: *W,LCVARN (./test03.v,137|0): Module instance name 'S2_L' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree.S2_L
halcheck: *W,LCVARN (./test03.v,146|0): Module instance name 'S2_R' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree.S2_R
halcheck: *W,LCVARN (./test03.v,157|0): Module instance name 'S3_FINAL' uses uppercase characters.
halcheck: *M,_SCOPE: booth32x32_top.tree
halcheck: *W,URAWIR (./test03.v,153|0): Wire 'cl6' defined in module 'pp_tree16x64' is unused (neither read nor assigned).
@:cl6 
halcheck: *N,IDLENG (./topMod.v,52|0): Identifier name 'cla' is not of appropriate length (4 to 16 characters).
halcheck: *M,_SCOPE: booth32x32_top.cla
halcheck: *N,CDNOTE (./cla.v,1|0): The compiler directive '`timescale' is used in the RTL.
halcheck: *W,DIFFMN (./cla.v,4|0): Module name 'cla_64bit' differs from file name 'cla.v'.
halcheck: *N,PRTCNT (./cla.v,4|0): Module/Entity 'cla_64bit' contains '5' ports.
halcheck: (./cla.v,4): Number of Input ports: 3.
halcheck: (./cla.v,4): Number of Output ports: 2.
halcheck: *W,STYVAL (./cla.v,5|0): Numeric value '63' used for identifier 'A'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./cla.v,6|0): Numeric value '63' used for identifier 'B'. Use constants to avoid portability issues.
halcheck: *W,STYVAL (./cla.v,8|0): Numeric value '63' used for identifier 'Sum'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./cla.v,5|0): Net name 'A' uses uppercase characters.
halcheck: *W,LCVARN (./cla.v,6|0): Net name 'B' uses uppercase characters.
halcheck: *W,LCVARN (./cla.v,7|0): Net name 'Cin' uses uppercase characters.
halcheck: *W,LCVARN (./cla.v,8|0): Net name 'Sum' uses uppercase characters.
halcheck: *W,LCVARN (./cla.v,9|0): Net name 'Cout' uses uppercase characters.
halcheck: *W,LCVARN (./cla.v,12|0): Net name 'G' uses uppercase characters.
halcheck: *W,STYVAL (./cla.v,12|0): Numeric value '63' used for identifier 'G'. Use constants to avoid portability issues.
halcheck: *W,LCVARN (./cla.v,12|0): Net name 'P' uses uppercase characters.
halcheck: *W,LCVARN (./cla.v,13|0): Net name 'C' uses uppercase characters.
halcheck: *W,STYVAL (./cla.v,13|0): Numeric value '64' used for identifier 'C'. Use constants to avoid portability issues.
halcheck: *M,_SCOPE: booth32x32_top
halcheck: *W,URDWIR (./topMod.v,48|0): Wire 'Cout' defined in module 'booth32x32_top' does not drive any object, but is assigned at least once.
@:Cout 
halcheck: Total errors   = 0.
halcheck: Total warnings = 281.
hal: *M,_SCOPE: __dummy_top
halsynth: Loading design snapshot....
halsynth: Traversing design hierarchy....
halsynth: *M,_SCOPE: booth32x32_top.booth_enc
halsynth: *W,VLGMEM (./multi_f.v,30|0): Module booth_radix4_multiplier has Verilog memories. For large memories, processing may take some time.
halsynth: *W,LOOPTM (./multi_f.v,34|0): Operation between a loop variable and a non-constant value is repeated more than 10 times.
halsynth: (./multi_f.v,37): Source HDL information for the error/warning mentioned above.
halsynth: (./multi_f.v,38): Source HDL information for the error/warning mentioned above.
halsynth: (./multi_f.v,39): Source HDL information for the error/warning mentioned above.
halsynth: (./multi_f.v,40): Source HDL information for the error/warning mentioned above.
~:CLKOUT
~:CLKSRD
~:COMBLP
~:INPOUT
~:MUDREG
~:MULWIR
~:UNDRIV
halsynth: *M,_SCOPE: booth32x32_top
halsynth: Total errors   = 0.
halsynth: Total warnings = 2.
hal: *M,_SCOPE: __dummy_top
halstruct: *M,_SCOPE: booth32x32_top
halstruct: *W,TPOUNR (./topMod.v,64|0): Output 'PROD_MSB' of top-level module is not a register.
@:PROD_MSB 
@:PROD_MSB 
halstruct: *E,CBPAHI (./topMod.v,64|0): Combinatorial path crossing multiple units drives 'PROD_MSB'.
@:PROD_MSB 
@:FINAL_PROD[63:32] 
@:Sum[32] booth32x32_top.cla
@:$$cpiHT_216384_15624 booth32x32_top.cla
@:P booth32x32_top.cla
@:P booth32x32_top.cla
@:$$cpiHT_216384_9744 booth32x32_top.cla
@:A booth32x32_top.cla
@:s_um 
@:s_u_m booth32x32_top.tree
@:s6 booth32x32_top.tree
@:sum[0] booth32x32_top.tree.S3_FINAL
@:$$cpiHT_35984_35336 booth32x32_top.tree.S3_FINAL
halstruct: (./topMod.v,64): in instance 'booth32x32_top', 'FINAL_PROD' drives 'PROD_MSB'.
@:PROD_MSB 
@:FINAL_PROD 
halstruct: (./topMod.v,52): in instance 'booth32x32_top', output 'Sum[32]' of instance 'cla' drives 'FINAL_PROD'.
@:FINAL_PROD 
@:FINAL_PROD 
@:FINAL_PROD 
@:Sum[32] booth32x32_top.cla
halstruct: (./cla.v,26): in instance 'booth32x32_top.cla', combinatorial function of 'P' drives 'Sum[32]'.
@:Sum[32] booth32x32_top.cla
@:P booth32x32_top.cla
halstruct: (./cla.v,19): in instance 'booth32x32_top.cla', combinatorial function of input 'A' drives 'P'.
@:P booth32x32_top.cla
@:A booth32x32_top.cla
halstruct: (./topMod.v,52): in instance 'booth32x32_top', 's_um' drives input 'A' of instance 'cla'.
@:s_um 
halstruct: (./topMod.v,35): in instance 'booth32x32_top', output 's_u_m' of instance 'tree' drives 's_um'.
@:s_um 
@:s_um 
@:s_um 
@:s_u_m booth32x32_top.tree
halstruct: (./test03.v,163): in instance 'booth32x32_top.tree', 's6' drives 's_u_m'.
@:s_u_m booth32x32_top.tree
@:s6 booth32x32_top.tree
halstruct: (./test03.v,157): in instance 'booth32x32_top.tree', output 'sum[0]' of instance 'S3_FINAL' drives 's6'.
@:s6 booth32x32_top.tree
@:s6 booth32x32_top.tree
@:s6 booth32x32_top.tree
@:sum[0] booth32x32_top.tree.S3_FINAL
halstruct: (./test03.v,37): in instance 'booth32x32_top.tree.S3_FINAL', combinatorial function drives 'sum[0]'.
@:sum[0] booth32x32_top.tree.S3_FINAL
halstruct: *W,TPOUNR (./topMod.v,63|0): Output 'PROD_LSB' of top-level module is not a register.
@:PROD_LSB 
@:PROD_LSB 
halstruct: *E,CBPAHI (./topMod.v,63|0): Combinatorial path crossing multiple units drives 'PROD_LSB'.
@:PROD_LSB 
@:FINAL_PROD[31:0] 
@:Sum[0] booth32x32_top.cla
@:$$cpiHT_216384_9992 booth32x32_top.cla
@:P booth32x32_top.cla
@:P booth32x32_top.cla
@:$$cpiHT_216384_9744 booth32x32_top.cla
@:A booth32x32_top.cla
@:s_um 
@:s_u_m booth32x32_top.tree
@:s6 booth32x32_top.tree
@:sum[0] booth32x32_top.tree.S3_FINAL
@:$$cpiHT_35984_35336 booth32x32_top.tree.S3_FINAL
halstruct: (./topMod.v,63): in instance 'booth32x32_top', 'FINAL_PROD' drives 'PROD_LSB'.
@:PROD_LSB 
@:FINAL_PROD 
halstruct: (./topMod.v,52): in instance 'booth32x32_top', output 'Sum[0]' of instance 'cla' drives 'FINAL_PROD'.
@:FINAL_PROD 
@:FINAL_PROD 
@:FINAL_PROD 
@:Sum[0] booth32x32_top.cla
halstruct: (./cla.v,26): in instance 'booth32x32_top.cla', combinatorial function of 'P' drives 'Sum[0]'.
@:Sum[0] booth32x32_top.cla
@:P booth32x32_top.cla
halstruct: (./cla.v,19): in instance 'booth32x32_top.cla', combinatorial function of input 'A' drives 'P'.
@:P booth32x32_top.cla
@:A booth32x32_top.cla
halstruct: (./topMod.v,52): in instance 'booth32x32_top', 's_um' drives input 'A' of instance 'cla'.
@:s_um 
halstruct: (./topMod.v,35): in instance 'booth32x32_top', output 's_u_m' of instance 'tree' drives 's_um'.
@:s_um 
@:s_um 
@:s_um 
@:s_u_m booth32x32_top.tree
halstruct: (./test03.v,163): in instance 'booth32x32_top.tree', 's6' drives 's_u_m'.
@:s_u_m booth32x32_top.tree
@:s6 booth32x32_top.tree
halstruct: (./test03.v,157): in instance 'booth32x32_top.tree', output 'sum[0]' of instance 'S3_FINAL' drives 's6'.
@:s6 booth32x32_top.tree
@:s6 booth32x32_top.tree
@:s6 booth32x32_top.tree
@:sum[0] booth32x32_top.tree.S3_FINAL
halstruct: (./test03.v,37): in instance 'booth32x32_top.tree.S3_FINAL', combinatorial function drives 'sum[0]'.
@:sum[0] booth32x32_top.tree.S3_FINAL
halstruct: *W,UNCONO (./topMod.v,52|0): Port 'Cout' (which is being used as an output) of entity/module 'cla_64bit' is being driven inside the design, but not connected (either partially or completely) in its instance 'booth32x32_top.cla'.
@:Cout booth32x32_top.cla
halstruct: *M,_SCOPE: booth32x32_top.booth_enc
halstruct: *W,SYNPRT (./multi_f.v,47|0): Output port 'PP0' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,48|0): Output port 'PP1' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,49|0): Output port 'PP2' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,50|0): Output port 'PP3' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,51|0): Output port 'PP4' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,52|0): Output port 'PP5' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,53|0): Output port 'PP6' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,54|0): Output port 'PP7' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,55|0): Output port 'PP8' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,56|0): Output port 'PP9' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,57|0): Output port 'PP10' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,58|0): Output port 'PP11' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,59|0): Output port 'PP12' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,60|0): Output port 'PP13' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,61|0): Output port 'PP14' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,62|0): Output port 'PP15' is assigned asynchronously.
halstruct: *W,SYNPRT (./multi_f.v,63|0): Output port 'PP16' is assigned asynchronously.
halstruct: *N,INFNOT (./multi_f.v,18|0): Ignoring wire 's' with no fanout to module/design-unit outputs or child instances.
@:s 
halstruct: *N,INFNOT (./multi_f.v,19|0): Ignoring wire 'us' with no fanout to module/design-unit outputs or child instances.
@:us 
halstruct: *N,INFNOT (./multi_f.v,20|0): Ignoring wire 'ne_1' with no fanout to module/design-unit outputs or child instances.
@:ne_1 
halstruct: *M,_SCOPE: booth32x32_top.tree
halstruct: *W,SYNPRT (./test03.v,163|0): Output port 's_u_m' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,164|0): Output port 'c_arr_y' is assigned asynchronously.
halstruct: *M,_SCOPE: booth32x32_top.tree.S1_0
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[0]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[1]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[2]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[3]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[4]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[5]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[6]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[7]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[8]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[9]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[10]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[11]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[12]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[13]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[14]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[15]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[16]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[17]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[18]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[19]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[20]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[21]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[22]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[23]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[24]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[25]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[26]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[27]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[28]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[29]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[30]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[31]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[32]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[33]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[34]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[35]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[36]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[37]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[38]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[39]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[40]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[41]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[42]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[43]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[44]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[45]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[46]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[47]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[48]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[49]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[50]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[51]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[52]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[53]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[54]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[55]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[56]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[57]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[58]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[59]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[60]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[61]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[62]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[63]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[0]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[1]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[2]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[3]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[4]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[5]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[6]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[7]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[8]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[9]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[10]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[11]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[12]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[13]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[14]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[15]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[16]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[17]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[18]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[19]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[20]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[21]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[22]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[23]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[24]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[25]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[26]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[27]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[28]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[29]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[30]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[31]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[32]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[33]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[34]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[35]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[36]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[37]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[38]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[39]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[40]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[41]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[42]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[43]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[44]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[45]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[46]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[47]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[48]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[49]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[50]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[51]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[52]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[53]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[54]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[55]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[56]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[57]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[58]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[59]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[60]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[61]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[62]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[63]' is assigned asynchronously.
halstruct: *N,INFNOT (./test03.v,34|0): Ignoring wire 'cout[63]' with no fanout to module/design-unit outputs or child instances.
@:cout[63] 
halstruct: *M,_SCOPE: booth32x32_top.tree.S1_FINAL
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[0]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[1]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[2]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[3]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[4]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[5]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[6]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[7]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[8]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[9]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[10]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[11]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[12]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[13]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[14]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[15]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[16]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[17]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[18]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[19]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[20]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[21]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[22]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[23]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[24]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[25]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[26]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[27]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[28]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[29]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[30]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[31]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[32]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[33]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[34]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[35]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[36]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[37]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[38]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[39]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[40]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[41]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[42]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[43]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[44]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[45]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[46]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[47]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[48]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[49]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[50]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[51]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[52]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[53]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[54]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[55]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[56]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[57]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[58]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[59]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[60]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[61]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[62]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sm[63]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[0]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[1]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[2]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[3]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[4]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[5]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[6]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[7]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[8]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[9]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[10]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[11]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[12]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[13]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[14]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[15]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[16]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[17]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[18]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[19]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[20]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[21]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[22]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[23]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[24]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[25]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[26]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[27]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[28]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[29]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[30]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[31]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[32]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[33]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[34]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[35]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[36]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[37]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[38]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[39]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[40]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[41]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[42]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[43]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[44]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[45]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[46]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[47]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[48]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[49]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[50]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[51]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[52]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[53]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[54]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[55]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[56]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[57]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[58]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[59]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[60]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[61]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[62]' is assigned asynchronously.
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'cry[63]' is assigned asynchronously.
halstruct: *M,_SCOPE: booth32x32_top.cla
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[0]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[1]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[2]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[3]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[4]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[5]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[6]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[7]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[8]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[9]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[10]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[11]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[12]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[13]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[14]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[15]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[16]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[17]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[18]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[19]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[20]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[21]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[22]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[23]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[24]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[25]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[26]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[27]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[28]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[29]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[30]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[31]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[32]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[33]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[34]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[35]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[36]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[37]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[38]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[39]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[40]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[41]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[42]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[43]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[44]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[45]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[46]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[47]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[48]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[49]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[50]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[51]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[52]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[53]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[54]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[55]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[56]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[57]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[58]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[59]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[60]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[61]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[62]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,26|0): Output port 'Sum[63]' is assigned asynchronously.
halstruct: *W,SYNPRT (./cla.v,30|0): Output port 'Cout' is assigned asynchronously.
halstruct: *W,ATLGLC (./topMod.v,3|0): Glue logic inferred in top-level module/design-unit 'booth32x32_top'.
@:booth32x32_top booth32x32_top
halstruct: (./topMod.v,50): HDL-statement inferred as glue logic.
@:cry_sh booth32x32_top
halstruct: (./topMod.v,63): HDL-statement inferred as glue logic.
@:PROD_LSB booth32x32_top
halstruct: (./topMod.v,64): HDL-statement inferred as glue logic.
@:PROD_MSB booth32x32_top
halstruct: *N,NUMDFF (./topMod.v,3|0): Number of single-bit D flip-flops present in the hierarchy is 0.
halstruct: Design facts generated in 'hal.design_facts'.
halstruct: Total errors   = 2.
halstruct: Total warnings = 344.
~:DSCNCK
^:DSCNCK
~:SLENEX
^:SLENEX
~:DSCNEN
^:DSCNEN
~:PCNOTC
^:PCNOTC
~:INPASN
~:UNCONN
~:UNDRIV
~:USEPRT
~:UASPRT
~:URDPRT
~:GATCLK
~:RENAME
~:RWRACE
~:WWRACE
~:LPISCS
~:LPSRCS
~:CMBPAU
^:CMBPAU
~:ASNCFL
^:ASNCFL
~:CONTLN
^:CONTLN
~:LATINF
^:LATINF
~:MULMCK
^:MULMCK
~:FFCKNP
^:FFCKNP
~:GTDCLK
^:GTDCLK
~:CLKLAT
^:CLKLAT
~:CLKNPI
^:CLKNPI
~:GTCLKN
^:GTCLKN
~:MRSTDT
^:MRSTDT
~:FDTHRU
^:FDTHRU
~:DFDRVS
^:DFDRVS
~:NEFLOP
^:NEFLOP
~:ACNCPI
^:ACNCPI
~:LENCPI
^:LENCPI
~:CLKDAT
^:CLKDAT
~:CLKLDT
^:CLKLDT
~:CLKINF
^:CLKINF
~:CDFDAT
^:CDFDAT
~:CDLDAT
^:CDLDAT
~:CAAFSR
^:CAAFSR
~:CACSRF
^:CACSRF
~:CAALSR
^:CAALSR
~:CACSRL
^:CACSRL
~:CLKDMN
^:CLKDMN
~:INSYNC
^:INSYNC
~:CBPAHI
^:CBPAHI
~:LFLTSE
^:LFLTSE
~:LFFTNE
^:LFFTNE
~:INFNOT
^:INFNOT
~:DALIAS
^:DALIAS
~:JKFFDT
^:JKFFDT
~:LATRAN
^:LATRAN
~:UNCONI
^:UNCONI
~:UNCONO
^:UNCONO
~:DIFCLK
^:DIFCLK
~:DIFRST
^:DIFRST
~:MLTDRV
^:MLTDRV
~:SUTHRU
^:SUTHRU
~:SEICLK
^:SEICLK
~:SMTCLK
^:SMTCLK
~:ASRTCK
^:ASRTCK
~:ASRTCL
^:ASRTCL
~:ASRTSC
^:ASRTSC
~:SCICLK
^:SCICLK
~:MULTCK
^:MULTCK
~:NOTCLK
^:NOTCLK
~:TCDFDT
^:TCDFDT
~:TCDLDT
^:TCDLDT
~:TCKDAT
^:TCKDAT
~:TCKLDT
^:TCKLDT
~:TXCNOP
^:TXCNOP
~:MEMNOP
^:MEMNOP
~:TENNOC
^:TENNOC
~:TENNOD
^:TENNOD
~:GLTASR
^:GLTASR
~:RSTEDG
^:RSTEDG
~:NOTSCN
^:NOTSCN
~:MCKNDB
^:MCKNDB
~:WENNDB
^:WENNDB
~:SCNLEN
^:SCNLEN
~:TMSCFF
^:TMSCFF
~:OUTMNR
^:OUTMNR
~:INPMNR
^:INPMNR
~:SRENSL
^:SRENSL
~:LDFFPI
^:LDFFPI
~:RSTDAT
^:RSTDAT
~:RSTGNH
^:RSTGNH
~:CLKGNH
^:CLKGNH
~:MXTSBC
^:MXTSBC
~:TSBNTH
^:TSBNTH
~:MXFNOT
^:MXFNOT
~:ATLGLC
^:ATLGLC
~:SLNOTP
^:SLNOTP
~:TPOUNR
^:TPOUNR
~:SELCLK
^:SELCLK
~:EDGMIX
^:EDGMIX
~:LGRSTL
^:LGRSTL
~:FRSTDL
^:FRSTDL
~:FRSTDF
^:FRSTDF
~:RSTDPT
^:RSTDPT
~:CLKDPT
^:CLKDPT
~:CLKUCL
^:CLKUCL
~:RSTUCL
^:RSTUCL
~:ENGTNR
^:ENGTNR
~:RSTDMN
^:RSTDMN
~:CLKNTP
^:CLKNTP
~:ADRSND
^:ADRSND
~:CGCENC
^:CGCENC
~:SEDFRS
^:SEDFRS
~:MULTCC
^:MULTCC
~:SMCKRS
^:SMCKRS
~:MEMNCB
^:MEMNCB
~:MTOMPH
^:MTOMPH
~:UVRFCN
^:UVRFCN
~:CONVRF
^:CONVRF
~:RSTENA
^:RSTENA
~:MOTINP
^:MOTINP
~:OPDNMT
^:OPDNMT
~:FENCNT
^:FENCNT
~:TPIUNR
^:TPIUNR
~:IPRTNR
^:IPRTNR
~:SYNPRT
^:SYNPRT
~:CONCLK
^:CONCLK
~:DATUNB
^:DATUNB
~:RSTINF
^:RSTINF
~:CKSMFC
^:CKSMFC
~:CDRNCF
^:CDRNCF
~:SAMESR
^:SAMESR
~:CGECCP
^:CGECCP
~:RSTNFR
^:RSTNFR
~:DTUNCP
^:DTUNCP
~:INSTCL
^:INSTCL
~:INSTCN
^:INSTCN
~:RSTCCK
^:RSTCCK
~:CGCPCK
^:CGCPCK
~:RSTCLK
^:RSTCLK
hal: *M,_SCOPE: __dummy_top
