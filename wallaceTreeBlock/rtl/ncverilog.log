ncverilog(64): 15.20-s051: (c) Copyright 1995-2018 Cadence Design Systems, Inc.
TOOL:	ncverilog	15.20-s051: Started on Feb 27, 2023 at 22:30:47 IST
ncverilog
	test03.v
	-hal
file: test03.v
	module worklib.compressor42_vec:v
		errors: 0, warnings: 0
	module worklib.compressor32_vec:v
		errors: 0, warnings: 0
	module worklib.pp_tree16x64:v
		errors: 0, warnings: 0
		Caching library 'worklib' ....... Done
	Elaborating the design hierarchy:
	Building instance overlay tables: .................... Done
	Generating native compiled code:
		worklib.compressor32_vec:v <0x3b8dd41b>
			streams:   2, words:  1361
		worklib.compressor42_vec:v <0x60e0993a>
			streams:  10, words:  4618
		worklib.compressor42_vec:v <0x74cbefde>
			streams:  10, words:  5364
		worklib.pp_tree16x64:v <0x548bc6a8>
			streams:   8, words:  2430
	Building instance specific data structures.
	Loading native compiled code:     .................... Done
	Design hierarchy summary:
		                  Instances  Unique
		Modules:                  9       3
		Scalar wires:          2375       -
		Vectored wires:          38       -
		Cont. assignments:     2375      15
		Pseudo assignments:       1       1
		Simulation timescale:   1ps
	Writing initial simulation snapshot: worklib.pp_tree16x64:v
hal(64): 15.20-s051: (c) Copyright 1995-2018 Cadence Design Systems, Inc.
hal: Options:   -cdslib ./INCA_libs/irun.lnx8664.15.20.nc/cds.lib -logfile ncverilog.log -f /home/sgeuser114/Desktop/venkat/singleCycleProcessor/wallaceTreeBlock/rtl/INCA_libs/irun.lnx8664.15.20.nc/hal.args .
hal: Snapshot:  worklib.pp_tree16x64:v.
hal: Workspace: /home/sgeuser114/Desktop/venkat/singleCycleProcessor/wallaceTreeBlock/rtl.
hal: Date: Mon Feb 27 22:30:49 IST 2023.

hal: Running on elaborated SNAPSHOT.....

  ==========================================================================
Performing lint checks 

halcheck(64): 15.20-s051: (c) Copyright 1995-2018 Cadence Design Systems, Inc.
visadev(64): 15.20-s051: (c) Copyright 1995-2018 Cadence Design Systems, Inc.
`timescale 1ns/1ps
|
halcheck: *N,CDNOTE (./test03.v,1|0): The compiler directive '`timescale' is used in the RTL.
	if (i == 0) begin
|
halcheck: *W,CTLCHR (./test03.v,25|0): HDL source line contains one or more control characters.
      		assign cin_i = cin_chain;
|
halcheck: *W,CTLCHR (./test03.v,26|0): HDL source line contains one or more control characters.
	 end
|
halcheck: *W,CTLCHR (./test03.v,27|0): HDL source line contains one or more control characters.
    	else begin
|
halcheck: *W,CTLCHR (./test03.v,28|0): HDL source line contains one or more control characters.
      		assign cin_i = cout[i-1];
|
halcheck: *W,CTLCHR (./test03.v,29|0): HDL source line contains one or more control characters.
	 end
|
halcheck: *W,CTLCHR (./test03.v,30|0): HDL source line contains one or more control characters.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halcheck: *W,MAXLEN (./test03.v,38|0): The HDL source line is 81 characters, which exceeds the recommended length of 80 characters.
            // cout is the bit-(i+2) contribution that chains to cin of next bit.
|
halcheck: *W,MAXLEN (./test03.v,43|0): The HDL source line is 81 characters, which exceeds the recommended length of 80 characters.
            // assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halcheck: *W,MAXLEN (./test03.v,71|0): The HDL source line is 84 characters, which exceeds the recommended length of 80 characters.
    output wire [63:0] CARRY//, c0, c1, c2, c3, c4, c5, s0, s1, s2, s3, s4, s5    // final carry row (interpret as <<1)
|
halcheck: *W,MAXLEN (./test03.v,96|0): The HDL source line is 119 characters, which exceeds the recommended length of 80 characters.
module pp_tree16x64 (
|
halcheck: *W,DIFFMN (./test03.v,85|0): Module name 'pp_tree16x64' differs from file name 'test03.v'.
module pp_tree16x64 (
|
halcheck: *N,PRTCNT (./test03.v,85|0): Module/Entity 'pp_tree16x64' contains '19' ports.
halcheck: (./test03.v,85): Number of Input ports: 17.
halcheck: (./test03.v,85): Number of Output ports: 2.
        .cin_chain(1'b0),
|
halcheck: *W,IPRTEX (./test03.v,107|0): A constant is used in a port expression.
        .cin_chain(1'b0),
|
halcheck: *W,IPRTEX (./test03.v,112|0): A constant is used in a port expression.
        .cin_chain(1'b0),
|
halcheck: *W,IPRTEX (./test03.v,117|0): A constant is used in a port expression.
        .cin_chain(1'b0),
|
halcheck: *W,IPRTEX (./test03.v,122|0): A constant is used in a port expression.
        .cin_chain(1'b0),
|
halcheck: *W,IPRTEX (./test03.v,135|0): A constant is used in a port expression.
        .cin_chain(1'b0),
|
halcheck: *W,IPRTEX (./test03.v,144|0): A constant is used in a port expression.
        .cin_chain(1'b0),
|
halcheck: *W,IPRTEX (./test03.v,155|0): A constant is used in a port expression.
    input  wire [63:0] P0,  input wire [63:0] P1,
|
halcheck: *W,NUMSUF (./test03.v,86|0): Identifier 'P0' has a numeric value suffix.
    input  wire [63:0] P0,  input wire [63:0] P1,
|
halcheck: *W,STYVAL (./test03.v,86|0): Numeric value '63' used for identifier 'P0'. Use constants to avoid portability issues.
    input  wire [63:0] P0,  input wire [63:0] P1,
|
halcheck: *W,NUMSUF (./test03.v,86|0): Identifier 'P1' has a numeric value suffix.
    input  wire [63:0] P0,  input wire [63:0] P1,
|
halcheck: *W,STYVAL (./test03.v,86|0): Numeric value '63' used for identifier 'P1'. Use constants to avoid portability issues.
    input  wire [63:0] P0,  input wire [63:0] P1,
|
halcheck: *N,DECLIN (./test03.v,86|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P2,  input wire [63:0] P3,
|
halcheck: *W,NUMSUF (./test03.v,87|0): Identifier 'P2' has a numeric value suffix.
    input  wire [63:0] P2,  input wire [63:0] P3,
|
halcheck: *W,STYVAL (./test03.v,87|0): Numeric value '63' used for identifier 'P2'. Use constants to avoid portability issues.
    input  wire [63:0] P2,  input wire [63:0] P3,
|
halcheck: *W,NUMSUF (./test03.v,87|0): Identifier 'P3' has a numeric value suffix.
    input  wire [63:0] P2,  input wire [63:0] P3,
|
halcheck: *W,STYVAL (./test03.v,87|0): Numeric value '63' used for identifier 'P3'. Use constants to avoid portability issues.
    input  wire [63:0] P2,  input wire [63:0] P3,
|
halcheck: *N,DECLIN (./test03.v,87|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P4,  input wire [63:0] P5,
|
halcheck: *W,NUMSUF (./test03.v,88|0): Identifier 'P4' has a numeric value suffix.
    input  wire [63:0] P4,  input wire [63:0] P5,
|
halcheck: *W,STYVAL (./test03.v,88|0): Numeric value '63' used for identifier 'P4'. Use constants to avoid portability issues.
    input  wire [63:0] P4,  input wire [63:0] P5,
|
halcheck: *W,NUMSUF (./test03.v,88|0): Identifier 'P5' has a numeric value suffix.
    input  wire [63:0] P4,  input wire [63:0] P5,
|
halcheck: *W,STYVAL (./test03.v,88|0): Numeric value '63' used for identifier 'P5'. Use constants to avoid portability issues.
    input  wire [63:0] P4,  input wire [63:0] P5,
|
halcheck: *N,DECLIN (./test03.v,88|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P6,  input wire [63:0] P7,
|
halcheck: *W,NUMSUF (./test03.v,89|0): Identifier 'P6' has a numeric value suffix.
    input  wire [63:0] P6,  input wire [63:0] P7,
|
halcheck: *W,STYVAL (./test03.v,89|0): Numeric value '63' used for identifier 'P6'. Use constants to avoid portability issues.
    input  wire [63:0] P6,  input wire [63:0] P7,
|
halcheck: *W,NUMSUF (./test03.v,89|0): Identifier 'P7' has a numeric value suffix.
    input  wire [63:0] P6,  input wire [63:0] P7,
|
halcheck: *W,STYVAL (./test03.v,89|0): Numeric value '63' used for identifier 'P7'. Use constants to avoid portability issues.
    input  wire [63:0] P6,  input wire [63:0] P7,
|
halcheck: *N,DECLIN (./test03.v,89|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P8,  input wire [63:0] P9,
|
halcheck: *W,NUMSUF (./test03.v,90|0): Identifier 'P8' has a numeric value suffix.
    input  wire [63:0] P8,  input wire [63:0] P9,
|
halcheck: *W,STYVAL (./test03.v,90|0): Numeric value '63' used for identifier 'P8'. Use constants to avoid portability issues.
    input  wire [63:0] P8,  input wire [63:0] P9,
|
halcheck: *W,NUMSUF (./test03.v,90|0): Identifier 'P9' has a numeric value suffix.
    input  wire [63:0] P8,  input wire [63:0] P9,
|
halcheck: *W,STYVAL (./test03.v,90|0): Numeric value '63' used for identifier 'P9'. Use constants to avoid portability issues.
    input  wire [63:0] P8,  input wire [63:0] P9,
|
halcheck: *N,DECLIN (./test03.v,90|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P10, input wire [63:0] P11,
|
halcheck: *W,NUMSUF (./test03.v,91|0): Identifier 'P10' has a numeric value suffix.
    input  wire [63:0] P10, input wire [63:0] P11,
|
halcheck: *W,STYVAL (./test03.v,91|0): Numeric value '63' used for identifier 'P10'. Use constants to avoid portability issues.
    input  wire [63:0] P10, input wire [63:0] P11,
|
halcheck: *W,NUMSUF (./test03.v,91|0): Identifier 'P11' has a numeric value suffix.
    input  wire [63:0] P10, input wire [63:0] P11,
|
halcheck: *W,STYVAL (./test03.v,91|0): Numeric value '63' used for identifier 'P11'. Use constants to avoid portability issues.
    input  wire [63:0] P10, input wire [63:0] P11,
|
halcheck: *N,DECLIN (./test03.v,91|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P12, input wire [63:0] P13,
|
halcheck: *W,NUMSUF (./test03.v,92|0): Identifier 'P12' has a numeric value suffix.
    input  wire [63:0] P12, input wire [63:0] P13,
|
halcheck: *W,STYVAL (./test03.v,92|0): Numeric value '63' used for identifier 'P12'. Use constants to avoid portability issues.
    input  wire [63:0] P12, input wire [63:0] P13,
|
halcheck: *W,NUMSUF (./test03.v,92|0): Identifier 'P13' has a numeric value suffix.
    input  wire [63:0] P12, input wire [63:0] P13,
|
halcheck: *W,STYVAL (./test03.v,92|0): Numeric value '63' used for identifier 'P13'. Use constants to avoid portability issues.
    input  wire [63:0] P12, input wire [63:0] P13,
|
halcheck: *N,DECLIN (./test03.v,92|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P14, input wire [63:0] P15,
|
halcheck: *W,NUMSUF (./test03.v,93|0): Identifier 'P14' has a numeric value suffix.
    input  wire [63:0] P14, input wire [63:0] P15,
|
halcheck: *W,STYVAL (./test03.v,93|0): Numeric value '63' used for identifier 'P14'. Use constants to avoid portability issues.
    input  wire [63:0] P14, input wire [63:0] P15,
|
halcheck: *W,NUMSUF (./test03.v,93|0): Identifier 'P15' has a numeric value suffix.
    input  wire [63:0] P14, input wire [63:0] P15,
|
halcheck: *W,STYVAL (./test03.v,93|0): Numeric value '63' used for identifier 'P15'. Use constants to avoid portability issues.
    input  wire [63:0] P14, input wire [63:0] P15,
|
halcheck: *N,DECLIN (./test03.v,93|0): Use a separate line for each HDL declaration.
    input  wire [63:0] P16,
|
halcheck: *W,NUMSUF (./test03.v,94|0): Identifier 'P16' has a numeric value suffix.
    input  wire [63:0] P16,
|
halcheck: *W,STYVAL (./test03.v,94|0): Numeric value '63' used for identifier 'P16'. Use constants to avoid portability issues.
    output wire [63:0] SUM,     // final sum row
|
halcheck: *W,STYVAL (./test03.v,95|0): Numeric value '63' used for identifier 'SUM'. Use constants to avoid portability issues.
    output wire [63:0] CARRY//, c0, c1, c2, c3, c4, c5, s0, s1, s2, s3, s4, s5    // final carry row (interpret as <<1)
|
halcheck: *W,STYVAL (./test03.v,96|0): Numeric value '63' used for identifier 'CARRY'. Use constants to avoid portability issues.
    input  wire [63:0] P0,  input wire [63:0] P1,
|
halcheck: *W,LCVARN (./test03.v,86|0): Net name 'P0' uses uppercase characters.
    input  wire [63:0] P0,  input wire [63:0] P1,
|
halcheck: *W,LCVARN (./test03.v,86|0): Net name 'P1' uses uppercase characters.
    input  wire [63:0] P2,  input wire [63:0] P3,
|
halcheck: *W,LCVARN (./test03.v,87|0): Net name 'P2' uses uppercase characters.
    input  wire [63:0] P2,  input wire [63:0] P3,
|
halcheck: *W,LCVARN (./test03.v,87|0): Net name 'P3' uses uppercase characters.
    input  wire [63:0] P4,  input wire [63:0] P5,
|
halcheck: *W,LCVARN (./test03.v,88|0): Net name 'P4' uses uppercase characters.
    input  wire [63:0] P4,  input wire [63:0] P5,
|
halcheck: *W,LCVARN (./test03.v,88|0): Net name 'P5' uses uppercase characters.
    input  wire [63:0] P6,  input wire [63:0] P7,
|
halcheck: *W,LCVARN (./test03.v,89|0): Net name 'P6' uses uppercase characters.
    input  wire [63:0] P6,  input wire [63:0] P7,
|
halcheck: *W,LCVARN (./test03.v,89|0): Net name 'P7' uses uppercase characters.
    input  wire [63:0] P8,  input wire [63:0] P9,
|
halcheck: *W,LCVARN (./test03.v,90|0): Net name 'P8' uses uppercase characters.
    input  wire [63:0] P8,  input wire [63:0] P9,
|
halcheck: *W,LCVARN (./test03.v,90|0): Net name 'P9' uses uppercase characters.
    input  wire [63:0] P10, input wire [63:0] P11,
|
halcheck: *W,LCVARN (./test03.v,91|0): Net name 'P10' uses uppercase characters.
    input  wire [63:0] P10, input wire [63:0] P11,
|
halcheck: *W,LCVARN (./test03.v,91|0): Net name 'P11' uses uppercase characters.
    input  wire [63:0] P12, input wire [63:0] P13,
|
halcheck: *W,LCVARN (./test03.v,92|0): Net name 'P12' uses uppercase characters.
    input  wire [63:0] P12, input wire [63:0] P13,
|
halcheck: *W,LCVARN (./test03.v,92|0): Net name 'P13' uses uppercase characters.
    input  wire [63:0] P14, input wire [63:0] P15,
|
halcheck: *W,LCVARN (./test03.v,93|0): Net name 'P14' uses uppercase characters.
    input  wire [63:0] P14, input wire [63:0] P15,
|
halcheck: *W,LCVARN (./test03.v,93|0): Net name 'P15' uses uppercase characters.
    input  wire [63:0] P16,
|
halcheck: *W,LCVARN (./test03.v,94|0): Net name 'P16' uses uppercase characters.
    output wire [63:0] SUM,     // final sum row
|
halcheck: *W,LCVARN (./test03.v,95|0): Net name 'SUM' uses uppercase characters.
    output wire [63:0] CARRY//, c0, c1, c2, c3, c4, c5, s0, s1, s2, s3, s4, s5    // final carry row (interpret as <<1)
|
halcheck: *W,LCVARN (./test03.v,96|0): Net name 'CARRY' uses uppercase characters.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'c0' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,STYVAL (./test03.v,98|0): Numeric value '63' used for identifier 'c0'. Use constants to avoid portability issues.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'c1' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'c2' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'c3' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'c4' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'c5' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 'c6' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 's0' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 's1' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 's2' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 's3' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 's4' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 's5' has a numeric value suffix.
    wire [63:0] c0, c1, c2, c3, c4, c5, c6, s0, s1, s2, s3, s4, s5, s6;
|
halcheck: *W,NUMSUF (./test03.v,98|0): Identifier 's6' has a numeric value suffix.
    wire [63:0] cl0;
|
halcheck: *W,NUMSUF (./test03.v,100|0): Identifier 'cl0' has a numeric value suffix.
    wire [63:0] cl0;
|
halcheck: *W,STYVAL (./test03.v,100|0): Numeric value '63' used for identifier 'cl0'. Use constants to avoid portability issues.
    wire [63:0] cl1;
|
halcheck: *W,NUMSUF (./test03.v,101|0): Identifier 'cl1' has a numeric value suffix.
    wire [63:0] cl1;
|
halcheck: *W,STYVAL (./test03.v,101|0): Numeric value '63' used for identifier 'cl1'. Use constants to avoid portability issues.
    wire [63:0] cl2;
|
halcheck: *W,NUMSUF (./test03.v,102|0): Identifier 'cl2' has a numeric value suffix.
    wire [63:0] cl2;
|
halcheck: *W,STYVAL (./test03.v,102|0): Numeric value '63' used for identifier 'cl2'. Use constants to avoid portability issues.
    wire [63:0] cl3;
|
halcheck: *W,NUMSUF (./test03.v,103|0): Identifier 'cl3' has a numeric value suffix.
    wire [63:0] cl3;
|
halcheck: *W,STYVAL (./test03.v,103|0): Numeric value '63' used for identifier 'cl3'. Use constants to avoid portability issues.
    wire [63:0] cl4;
|
halcheck: *W,NUMSUF (./test03.v,127|0): Identifier 'cl4' has a numeric value suffix.
    wire [63:0] cl4;
|
halcheck: *W,STYVAL (./test03.v,127|0): Numeric value '63' used for identifier 'cl4'. Use constants to avoid portability issues.
    wire [63:0] cl5;
|
halcheck: *W,NUMSUF (./test03.v,128|0): Identifier 'cl5' has a numeric value suffix.
    wire [63:0] cl5;
|
halcheck: *W,STYVAL (./test03.v,128|0): Numeric value '63' used for identifier 'cl5'. Use constants to avoid portability issues.
    wire [63:0] cl6;
|
halcheck: *W,NUMSUF (./test03.v,149|0): Identifier 'cl6' has a numeric value suffix.
    wire [63:0] cl6;
|
halcheck: *W,STYVAL (./test03.v,149|0): Numeric value '63' used for identifier 'cl6'. Use constants to avoid portability issues.
    assign cl0 = (c0 << 1);
|
halcheck: *W,SHFTOF (./test03.v,129|0): Shift overflow in module/design-unit pp_tree16x64, some bits will be lost.
    assign cl1 = (c1 << 1);
|
halcheck: *W,SHFTOF (./test03.v,130|0): Shift overflow in module/design-unit pp_tree16x64, some bits will be lost.
    assign cl2 = (c2 << 1);
|
halcheck: *W,SHFTOF (./test03.v,140|0): Shift overflow in module/design-unit pp_tree16x64, some bits will be lost.
    assign cl3 = (c3 << 1);
|
halcheck: *W,SHFTOF (./test03.v,141|0): Shift overflow in module/design-unit pp_tree16x64, some bits will be lost.
    assign cl4 = (c4 << 1);
|
halcheck: *W,SHFTOF (./test03.v,151|0): Shift overflow in module/design-unit pp_tree16x64, some bits will be lost.
    assign cl5 = (c5 << 1);
|
halcheck: *W,SHFTOF (./test03.v,152|0): Shift overflow in module/design-unit pp_tree16x64, some bits will be lost.
    assign cl6 = (c6 << 1);
|
halcheck: *W,SHFTOF (./test03.v,161|0): Shift overflow in module/design-unit pp_tree16x64, some bits will be lost.
    compressor42_vec S1_0 (
|
halcheck: *W,LCVARN (./test03.v,105|0): Module instance name 'S1_0' uses uppercase characters.
module compressor42_vec (
|
halcheck: *W,DIFFMN (./test03.v,3|0): Module name 'compressor42_vec' differs from file name 'test03.v'.
module compressor42_vec (
|
halcheck: *W,MULTMF (./test03.v,3|0): More than one design-unit definition in file 'test03.v'.
module compressor42_vec (
|
halcheck: *N,PRTCNT (./test03.v,3|0): Module/Entity 'compressor42_vec' contains '7' ports.
halcheck: (./test03.v,3): Number of Input ports: 5.
halcheck: (./test03.v,3): Number of Output ports: 2.
    input  wire [63:0] a,
|
halcheck: *W,STYVAL (./test03.v,4|0): Numeric value '63' used for identifier 'a'. Use constants to avoid portability issues.
    input  wire [63:0] b,
|
halcheck: *W,STYVAL (./test03.v,5|0): Numeric value '63' used for identifier 'b'. Use constants to avoid portability issues.
    input  wire [63:0] c,
|
halcheck: *W,STYVAL (./test03.v,6|0): Numeric value '63' used for identifier 'c'. Use constants to avoid portability issues.
    input  wire [63:0] d,
|
halcheck: *W,STYVAL (./test03.v,7|0): Numeric value '63' used for identifier 'd'. Use constants to avoid portability issues.
    output wire [63:0] sum,         // same weight
|
halcheck: *W,STYVAL (./test03.v,9|0): Numeric value '63' used for identifier 'sum'. Use constants to avoid portability issues.
    output wire [63:0] carry        // carry row (to be interpreted as <<1)
|
halcheck: *W,STYVAL (./test03.v,10|0): Numeric value '63' used for identifier 'carry'. Use constants to avoid portability issues.
    wire [63:0] c1;
|
halcheck: *W,NUMSUF (./test03.v,13|0): Identifier 'c1' has a numeric value suffix.
    wire [63:0] c1;
|
halcheck: *W,STYVAL (./test03.v,13|0): Numeric value '63' used for identifier 'c1'. Use constants to avoid portability issues.
    wire [63:0] c2;
|
halcheck: *W,NUMSUF (./test03.v,14|0): Identifier 'c2' has a numeric value suffix.
    wire [63:0] c2;
|
halcheck: *W,STYVAL (./test03.v,14|0): Numeric value '63' used for identifier 'c2'. Use constants to avoid portability issues.
    wire [63:0] s1;
|
halcheck: *W,NUMSUF (./test03.v,15|0): Identifier 's1' has a numeric value suffix.
    wire [63:0] s1;
|
halcheck: *W,STYVAL (./test03.v,15|0): Numeric value '63' used for identifier 's1'. Use constants to avoid portability issues.
    wire [63:0] cout;
|
halcheck: *W,STYVAL (./test03.v,18|0): Numeric value '63' used for identifier 'cout'. Use constants to avoid portability issues.
        for (i = 0; i < 64; i = i + 1) begin
|
halcheck: *W,UNMGEN (./test03.v,22|0): Unnamed generate block found in module 'compressor42_vec'.
	if (i == 0) begin
|
halcheck: *W,UNMGEN (./test03.v,25|0): Unnamed generate block found in module 'compressor42_vec'.
    	else begin
|
halcheck: *W,UNMGEN (./test03.v,28|0): Unnamed generate block found in module 'compressor42_vec'.
    wire [63:0] c1;
|
halcheck: *W,URAWIR (./test03.v,13|0): Wire 'c1' defined in module 'compressor42_vec' is unused (neither read nor assigned).
    wire [63:0] c2;
|
halcheck: *W,URAWIR (./test03.v,14|0): Wire 'c2' defined in module 'compressor42_vec' is unused (neither read nor assigned).
    wire [63:0] cout;
|
halcheck: *W,URDWIR (./test03.v,18|0): Wire 'cout[63]' defined in module 'compressor42_vec' does not drive any object, but is assigned at least once.
    compressor42_vec S1_1 (
|
halcheck: *W,LCVARN (./test03.v,110|0): Module instance name 'S1_1' uses uppercase characters.
    compressor42_vec S1_2 (
|
halcheck: *W,LCVARN (./test03.v,115|0): Module instance name 'S1_2' uses uppercase characters.
    compressor42_vec S1_3 (
|
halcheck: *W,LCVARN (./test03.v,120|0): Module instance name 'S1_3' uses uppercase characters.
    compressor42_vec S2_L (
|
halcheck: *W,LCVARN (./test03.v,133|0): Module instance name 'S2_L' uses uppercase characters.
    compressor42_vec S2_R (
|
halcheck: *W,LCVARN (./test03.v,142|0): Module instance name 'S2_R' uses uppercase characters.
    compressor42_vec S3_FINAL (
|
halcheck: *W,LCVARN (./test03.v,153|0): Module instance name 'S3_FINAL' uses uppercase characters.
    compressor32_vec S4_FINAL (
|
halcheck: *W,LCVARN (./test03.v,162|0): Module instance name 'S4_FINAL' uses uppercase characters.
module compressor32_vec (
|
halcheck: *W,DIFFMN (./test03.v,50|0): Module name 'compressor32_vec' differs from file name 'test03.v'.
module compressor32_vec (
|
halcheck: *W,MULTMF (./test03.v,50|0): More than one design-unit definition in file 'test03.v'.
module compressor32_vec (
|
halcheck: *N,PRTCNT (./test03.v,50|0): Module/Entity 'compressor32_vec' contains '5' ports.
halcheck: (./test03.v,50): Number of Input ports: 3.
halcheck: (./test03.v,50): Number of Output ports: 2.
    input  wire [63:0] a,
|
halcheck: *W,STYVAL (./test03.v,51|0): Numeric value '63' used for identifier 'a'. Use constants to avoid portability issues.
    input  wire [63:0] b,
|
halcheck: *W,STYVAL (./test03.v,52|0): Numeric value '63' used for identifier 'b'. Use constants to avoid portability issues.
    input  wire [63:0] c,
|
halcheck: *W,STYVAL (./test03.v,53|0): Numeric value '63' used for identifier 'c'. Use constants to avoid portability issues.
    output wire [63:0] sum,         // same weight
|
halcheck: *W,STYVAL (./test03.v,56|0): Numeric value '63' used for identifier 'sum'. Use constants to avoid portability issues.
    output wire [63:0] carry        // carry row (to be interpreted as <<1)
|
halcheck: *W,STYVAL (./test03.v,57|0): Numeric value '63' used for identifier 'carry'. Use constants to avoid portability issues.
        for (i = 0; i < 64; i = i + 1) begin
|
halcheck: *W,UNMGEN (./test03.v,64|0): Unnamed generate block found in module 'compressor32_vec'.
    output wire [63:0] carry        // carry row (to be interpreted as <<1)
|
halcheck: *N,DECLIN (./test03.v,57|0): Use a separate line for each HDL declaration.
halcheck: Total errors   = 0.
halcheck: Total warnings = 146.

  ==========================================================================
Performing synthesizability checks 

cfe64: 15.20.051-s(15.20.s051): (c) Copyright 1995 - 2018 Cadence Design Systems, Inc.
cfe64 Build : Mon May  7 17:15:12 IST 2018 ldvopt246
halsynth: Loading design snapshot....
halsynth: Traversing design hierarchy....
halsynth: Total errors   = 0.
halsynth: Total warnings = 0.

  ==========================================================================
Performing structural checks 

halstruct(64): 15.20-s051: (c) Copyright 1995-2018 Cadence Design Systems, Inc.
visadev(64): 15.20-s051: (c) Copyright 1995-2018 Cadence Design Systems, Inc.
    compressor32_vec S4_FINAL (
|
halstruct: *W,TPOUNR (./test03.v,162|0): Output 'SUM' of top-level module is not a register.
    compressor32_vec S4_FINAL (
|
halstruct: *E,CBPAHI (./test03.v,162|0): Combinatorial path crossing multiple units drives 'SUM'.
halstruct: (./test03.v,162): in instance 'pp_tree16x64', output 'sum[0]' of instance 'S4_FINAL' drives 'SUM'.
halstruct: (./test03.v,66): in instance 'pp_tree16x64.S4_FINAL', combinatorial function of input 'a' drives 'sum[0]'.
halstruct: (./test03.v,162): in instance 'pp_tree16x64', 's6' drives input 'a' of instance 'S4_FINAL'.
halstruct: (./test03.v,153): in instance 'pp_tree16x64', output 'sum[0]' of instance 'S3_FINAL' drives 's6'.
halstruct: (./test03.v,37): in instance 'pp_tree16x64.S3_FINAL', combinatorial function drives 'sum[0]'.
    compressor32_vec S4_FINAL (
|
halstruct: *W,TPOUNR (./test03.v,162|0): Output 'CARRY' of top-level module is not a register.
    compressor32_vec S4_FINAL (
|
halstruct: *E,CBPAHI (./test03.v,162|0): Combinatorial path crossing multiple units drives 'CARRY'.
halstruct: (./test03.v,162): in instance 'pp_tree16x64', output 'carry[0]' of instance 'S4_FINAL' drives 'CARRY'.
halstruct: (./test03.v,67): in instance 'pp_tree16x64.S4_FINAL', combinatorial function of input 'a' drives 'carry[0]'.
halstruct: (./test03.v,162): in instance 'pp_tree16x64', 's6' drives input 'a' of instance 'S4_FINAL'.
halstruct: (./test03.v,153): in instance 'pp_tree16x64', output 'sum[0]' of instance 'S3_FINAL' drives 's6'.
halstruct: (./test03.v,37): in instance 'pp_tree16x64.S3_FINAL', combinatorial function drives 'sum[0]'.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[0]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[1]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[2]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[3]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[4]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[5]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[6]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[7]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[8]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[9]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[10]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[11]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[12]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[13]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[14]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[15]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[16]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[17]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[18]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[19]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[20]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[21]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[22]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[23]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[24]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[25]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[26]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[27]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[28]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[29]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[30]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[31]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[32]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[33]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[34]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[35]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[36]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[37]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[38]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[39]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[40]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[41]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[42]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[43]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[44]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[45]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[46]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[47]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[48]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[49]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[50]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[51]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[52]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[53]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[54]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[55]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[56]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[57]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[58]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[59]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[60]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[61]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[62]' is assigned asynchronously.
            assign sum[i] = s1[i] ^ d[i] ^ cin_i;
|
halstruct: *W,SYNPRT (./test03.v,37|0): Output port 'sum[63]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[0]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[1]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[2]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[3]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[4]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[5]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[6]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[7]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[8]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[9]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[10]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[11]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[12]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[13]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[14]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[15]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[16]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[17]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[18]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[19]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[20]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[21]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[22]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[23]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[24]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[25]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[26]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[27]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[28]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[29]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[30]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[31]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[32]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[33]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[34]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[35]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[36]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[37]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[38]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[39]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[40]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[41]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[42]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[43]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[44]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[45]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[46]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[47]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[48]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[49]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[50]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[51]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[52]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[53]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[54]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[55]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[56]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[57]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[58]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[59]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[60]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[61]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[62]' is assigned asynchronously.
            assign carry[i]  = (s1[i] & d[i]) | (s1[i] & cin_i) | (d[i] & cin_i);
|
halstruct: *W,SYNPRT (./test03.v,38|0): Output port 'carry[63]' is assigned asynchronously.
            assign cout[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *N,INFNOT (./test03.v,34|0): Ignoring wire 'cout[63]' with no fanout to module/design-unit outputs or child instances.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[0]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[1]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[2]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[3]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[4]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[5]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[6]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[7]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[8]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[9]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[10]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[11]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[12]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[13]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[14]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[15]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[16]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[17]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[18]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[19]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[20]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[21]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[22]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[23]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[24]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[25]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[26]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[27]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[28]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[29]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[30]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[31]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[32]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[33]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[34]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[35]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[36]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[37]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[38]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[39]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[40]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[41]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[42]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[43]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[44]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[45]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[46]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[47]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[48]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[49]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[50]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[51]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[52]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[53]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[54]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[55]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[56]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[57]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[58]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[59]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[60]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[61]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[62]' is assigned asynchronously.
            assign sum[i]  = a[i] ^ b[i] ^ c[i];
|
halstruct: *W,SYNPRT (./test03.v,66|0): Output port 'sum[63]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[0]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[1]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[2]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[3]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[4]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[5]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[6]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[7]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[8]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[9]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[10]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[11]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[12]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[13]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[14]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[15]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[16]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[17]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[18]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[19]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[20]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[21]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[22]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[23]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[24]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[25]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[26]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[27]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[28]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[29]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[30]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[31]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[32]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[33]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[34]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[35]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[36]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[37]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[38]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[39]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[40]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[41]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[42]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[43]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[44]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[45]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[46]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[47]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[48]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[49]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[50]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[51]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[52]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[53]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[54]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[55]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[56]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[57]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[58]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[59]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[60]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[61]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[62]' is assigned asynchronously.
            assign carry[i]  = (a[i] & b[i]) | (a[i] & c[i]) | (b[i] & c[i]);
|
halstruct: *W,SYNPRT (./test03.v,67|0): Output port 'carry[63]' is assigned asynchronously.
module pp_tree16x64 (
|
halstruct: *W,ATLGLC (./test03.v,85|0): Glue logic inferred in top-level module/design-unit 'pp_tree16x64'.
halstruct: (./test03.v,129): HDL-statement inferred as glue logic.
halstruct: (./test03.v,130): HDL-statement inferred as glue logic.
halstruct: (./test03.v,140): HDL-statement inferred as glue logic.
halstruct: (./test03.v,141): HDL-statement inferred as glue logic.
halstruct: (./test03.v,151): HDL-statement inferred as glue logic.
halstruct: (./test03.v,152): HDL-statement inferred as glue logic.
halstruct: (./test03.v,161): HDL-statement inferred as glue logic.
module pp_tree16x64 (
|
halstruct: *N,NUMDFF (./test03.v,85|0): Number of single-bit D flip-flops present in the hierarchy is 0.
halstruct: Design facts generated in 'hal.design_facts'.
halstruct: Total errors   = 2.
halstruct: Total warnings = 259.

  ==========================================================================

Analysis summary :

 Errors   : (2)
  CBPAHI (2)     

 Warnings : (405)
  ATLGLC (1)      CTLCHR (6)      DIFFMN (3)      IPRTEX (7)     
  LCVARN (27)     MAXLEN (4)      MULTMF (2)      NUMSUF (41)    
  SHFTOF (7)      STYVAL (42)     SYNPRT (256)    TPOUNR (2)     
  UNMGEN (4)      URAWIR (2)      URDWIR (1)     

 Notes    : (15)
  CDNOTE (1)      DECLIN (9)      INFNOT (1)      NUMDFF (1)     
  PRTCNT (3)     

Analysis complete.

 ==========================================================================

To analyze results, run following command :
    ncbrowse -64bit -cdslib ./INCA_libs/irun.lnx8664.15.20.nc/cds.lib -hdlvar ./INCA_libs/irun.lnx8664.15.20.nc/hdl.var -sortby severity -sortby category -sortby tag ncverilog.log

TOOL:	ncverilog	15.20-s051: Exiting on Feb 27, 2023 at 22:30:53 IST  (total: 00:00:06)
